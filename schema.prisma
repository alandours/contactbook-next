generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Alias {
  id        String  @id @default(uuid())
  alias     String  @db.VarChar(40)
  contactId String  @map("contact_id")
  contact   Contact @relation(fields: [contactId], references: [id])

  @@map("aliases")
}

model Contact {
  id        String             @id @default(uuid())
  name      String             @db.VarChar(40)
  lastname  String?            @db.VarChar(40)
  photo     String?            @db.VarChar(60)
  birthday  DateTime?          @db.Date
  address   String?            @db.VarChar(40)
  notes     String?
  yearMet   Int?               @map("year_met") @db.SmallInt
  favorite  Boolean            @default(false)
  active    Boolean            @default(true)
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")
  aliases   Alias[]
  emails    Email[]
  numbers   Number[]
  socials   Social[]
  tags      Tag[]
  relatesTo ContactToContact[] @relation("relatesTo")
  relatedTo ContactToContact[] @relation("relatedTo")

  @@map("contacts")
}

model ContactToContact {
  id            Int     @id @default(autoincrement())
  label         String? @db.VarChar(40)
  fromContactId String
  contactId     String
  fromContact   Contact @relation("relatesTo", fields: [fromContactId], references: [id])
  contact       Contact @relation("relatedTo", fields: [contactId], references: [id])

  @@unique([fromContactId, contactId])
}

model Email {
  id        String    @id @default(uuid())
  email     String    @db.VarChar(40)
  type      EmailType @default(Personal)
  label     String?   @db.VarChar(40)
  contactId String    @map("contact_id")
  contact   Contact   @relation(fields: [contactId], references: [id])

  @@map("emails")
}

model Number {
  id        String     @id @default(uuid())
  number    String     @db.VarChar(20)
  type      NumberType @default(Mobile)
  label     String?    @db.VarChar(40)
  contactId String     @map("contact_id")
  contact   Contact    @relation(fields: [contactId], references: [id])

  @@map("numbers")
}

model Social {
  id         String   @id @default(uuid())
  username   String   @db.VarChar(80)
  label      String?  @db.VarChar(40)
  platformId String   @map("platform_id")
  contactId  String   @map("contact_id")
  contact    Contact  @relation(fields: [contactId], references: [id])
  platform   Platform @relation(fields: [platformId], references: [id])

  @@map("socials")
}

model Platform {
  id      String   @id @default(uuid())
  name    String   @db.VarChar(40)
  url     String?  @db.VarChar(40)
  prefix  String?  @db.VarChar(10)
  socials Social[]

  @@map("platforms")
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  contacts Contact[]
}

enum EmailType {
  Personal
  Work
  Custom
}

enum NumberType {
  Mobile
  Home
  Secondary
  Work
  Custom
}
